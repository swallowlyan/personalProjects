##vue第一天复习

-vm => viewModel 数据终会被vm所代理

-{{a}}取值代表式，通过{{}}来进行取值，默认可以不写this，表达式 赋值运算 计算 三元表达式
尽量少写逻辑(computed)

##指令：

- dom元素的行间属性，vue提供了内置的指令，必须v-开头，后面的值均为变量。

	- v-model (表单元素)忽略value,checked,selected,将数据绑定到视图上，
	视图修改后会影响数据的变化。
	- v-text  取代{{}} v-cloak 解决闪烁(块)问题，后期都可以不采用，使用v-cloak要加样式。
	- v-once 绑定一次，数据再变化不会导致视图刷新,写在不想刷新的标签上。
	- v-html 将html字符串转化成html。
	- v-for 循环（数组，对象，字符串，数字）
		///
		<div v-for="value in/of 数组"></div>
		<div v-for="(value,index) in/of 数组"></div>
		///

##事件v-on （@）

-绑定dom元素,函数需要定义在methods中，不能和data里的内容重名，
 this指向的是实例，不能使用箭头函数，事件源对象，如果不写括号，
 会自动传入，否则手动传入$event

<div @事件名="fn"></div>


##安装
cnpm install vue axios bootstrap

cnpm install axios

cnpm install animate.css

##promise

fetch
asynca wait //终极异步解决方案



##vue第二天复习

-v-model （如果checkbox,select多选是数组，提供一个value属性）
（radio checkbox分组靠的是v-model）,checked selected不存在

-修饰符  .number .lazy

-按键修饰符 .enter .ctrl .keyCode

-事件  
	-@事件.stop
	stopPropagation，cancleBubble=true;
	-@事件.captrue
	xxx.addEventListener('click',fn)///(true-捕获，false-冒泡；默认冒泡)
	-@事件.prevent
        preventDefault,returnValue=true;
	-@事件.once
	on（'click'） off('click')
	-@事件.self
	e.srcElement&&e.target 判断事件源绑定事件

-jquery once 

-e.srcElement&&e.target 判断事件源绑定事件

##filters实例上可以用
{{"123" | my(1,2,3)}}
filters:{
	my(data,param1,param2,param3){
	
	}
}

##computed计算"属性",不是方法
-方法不会有缓存，computed会根据依赖（归vue管理的数据，可以响应式变化的）的属性进行缓存
-两部分组成 有get和set（不能只写set）
	一般情况下，通过js赋值影响其他人，或者表单元素设置值的时候，会调用set方法。


##v-if v-hsow

-v-if 操作的是dom ，v-if可以和v-else,v-else-if,v-else连写
-v-show操作的是样式

##v-bind 简写：
-动态绑定"属性"
-<img :src="src"/>


##实现单页开发的方式
-通过hash记录跳转的路径（可以产生历史管理）
-浏览器自带的历史管理的方法history (history.pushState('','','后缀str')，可能会导致404错误)
开发时使用hash的方式 上线的话我们会使用history的方式

